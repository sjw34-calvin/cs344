EXERCISE 3.1
a) Which algorithms work (in a timely manner) and which donâ€™t? Explain your results in terms of the capabilities (and implementations) of the algorithms and nature of the problems.
Depth first search does not work.
AC3 algorithm does work and its very quick almost instantaneous. Only works on the easy puzzle does not work on the harder/hardest puzzle
back_tracking search does work but its a little slower than the AC3 algorithm
min_conflicts does not find a solution

AC3 fails on higher levels because it can only compare two things. You would need path consistency for the program to be able to more effectively solve the sudoku puzzles.
Forward checking works really well because it takes a partial solution and it checks whether another variable can take a consistent value.
Depth first search does not work because it could go into a branch that has infinitely many solutions, therefore, causing it to never reach a solution.


b) What effect does configuring the settings for backtracking have on the results? Try the following:
       i) Set the variable/value ordering (i.e., the select_unassigned_variable parameter) to first-unassigned-variable (the default) or minimum-remaining-values (i.e., mrv).
        When the variable is set to first_unassigned_variable backtracking will still find a solution. But when its changed
        to minimum_remaining_values it takes a very very long time to find a solution.
       ii) Set the inference (i.e., the inference parameter) to forward-checking (i.e., forward_checking).
        When the inference is changed from no inference to forward_checking it is instantaneous almost seems faster than AC3
        With forward_checking backtracking also finds a solution to the harder/hardest puzzle!!

    Which, if any, of these settings should work best for sudoku? What combination of settings actually works the best?
    So as long forward_checking is turned on backtracking will find a solution instantaneously. The value ordering does not really seem to make a
    difference as long forward_checking is on.
***NOTE: if you come back to this remember that you have changed it from no_inference to forward_checking***

EXERCISE 3.2

a)How large can n get for each of the algorithms? Why?
AC3 does not work.
back_tracking and min_conflict work for very large n-values, however back_tracking becomes very slow.


b)What backtracking settings work the best? Why?
forward_checking and mrv work the best. mrv works well because its the variable that is most likely to cause failure in a branch assigned first.


c)How many steps does Min-Conflicts require to do its work?
It is random each time because a random conflicted variable is chosen each time.

EXERCISE 3.3

a) Compare and contrast the specifications for CSP (i.e., csp.CSP) and traditional problems (i.e., search.Problem). Be sure to consider the nature of states, domains, actions, results and goal tests.
In CSP you are allowed to have bad/invalid states because you are essentially moving towards a solution. Whereas, in traditional problems it will keep looking through states and stop if you find a bad state, which will not results in a solution.

b) Compare and contrast the nature of the heuristics deployed in traditional and constraint-based problem solving.
Traditional searches will keep searching for valid solutions. Whereas, constraint-based problems will keep looking for states valid/invalid but moving towards finding a solution. Constraint based problems also have a set of domain and constraints that it must match in order to find a solution
